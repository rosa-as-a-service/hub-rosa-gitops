---
- name: Install and configure ArgoCD
  hosts: localhost
  connection: local
  become: false
  gather_facts: false
  tasks:
    # Deploy ArgoCD
    - name: configure argocd namespace
      kubernetes.core.k8s:
        src: "argocd/namespace.yml"
      failed_when: false

    - name: configure argocd operatorgroup
      kubernetes.core.k8s:
        src: "argocd/operatorgroup.yml"

    - name: configure argocd subscription
      kubernetes.core.k8s:
        src: "argocd/subscription.yml"
      register: deploy_argocd
      until: "deploy_argocd.result.status.state == 'AtLatestKnown'"
      retries: 10
      delay: 10

    - name: configure argocd cluster role binding
      kubernetes.core.k8s:
        src: "argocd/clusterrolebinding.yml"

    - name: configure argocd repo
      kubernetes.core.k8s:
        template: "argocd/repo.yml"

    - name: configure argocd route
      kubernetes.core.k8s:
        template: "argocd/route.yml"

    - name: configure argocd initial application
      kubernetes.core.k8s:
        template: "argocd/application.yml"

    # This namespace is later managed by GitOps, but is required for the initial bootstrapping to complete
    - name: configure ROSAaaS project
      kubernetes.core.k8s:
        resource_definition:
          kind: Project
          apiVersion: project.openshift.io/v1
          metadata:
            name: rosa-as-a-service
            labels:
              kubernetes.io/metadata.name: rosa-as-a-service
      failed_when: false

    - name: configure SSH secret
      kubernetes.core.k8s:
        resource_definition:
          kind: Secret
          apiVersion: v1
          metadata:
            name: argocd-github-ssh
            namespace: rosa-as-a-service
            annotations:
              tekton.dev/git-0: github.com
          type: Opaque
          data:
            id_rsa: "{{ ssh_private_key | b64encode}}"

    - name: link SSH secret to pipelines service account
      kubernetes.core.k8s:
        resource_definition:
          kind: ServiceAccount
          apiVersion: v1
          metadata:
            name: pipeline
            namespace: rosa-as-a-service
          secrets:
            - name: argocd-github-ssh

    - name: configure webhook secret
      kubernetes.core.k8s:
        resource_definition:
          kind: Secret
          apiVersion: v1
          metadata:
            name: webhook-secret
            namespace: rosa-as-a-service
          type: Opaque
          data:
            secretToken: "{{ webhook_secret | b64encode }}"

    - name: configure ROSA SSO secret
      kubernetes.core.k8s:
        resource_definition:
          kind: Secret
          apiVersion: v1
          metadata:
            name: oidc
            namespace: rosa-as-a-service
          data:
            key: "{{ sso_oidc_key | b64encode }}"
            secret: "{{ sso_oidc_secret | b64encode }}"
            endpoint: "{{ sso_oidc_endpoint | b64encode }}"
            verify-ssl: "{{ sso_oidc_verify_ssl | b64encode }}"

    # This namespace is later managed by GitOps, but is required for the initial bootstrapping to complete
    - name: configure cert-manager project
      kubernetes.core.k8s:
        resource_definition:
          kind: Project
          apiVersion: project.openshift.io/v1
          metadata:
            name: cert-manager
            labels:
              kubernetes.io/metadata.name: cert-manager
      failed_when: false

    - name: configure cert-manager route53 secret
      kubernetes.core.k8s:
        resource_definition:
          kind: Secret
          apiVersion: v1
          metadata:
            name: route53-credentials-secret
            namespace: cert-manager
          data:
            access-key-id: "{{ access_key_id | b64encode}}"
            secret-access-key: "{{ secret_access_key | b64encode }}"
          type: Opaque

    - name: template observability secret
      kubernetes.core.k8s:
        resource_definition:
          apiVersion: v1
          kind: Secret
          metadata:
            name: thanos-object-storage
            namespace: open-cluster-management-observability
          type: Opaque
          stringData:
            thanos.yaml: |
              type: s3
              config:
                bucket: YOUR_RH_DATA_FOUNDATION_BUCKET
                endpoint: YOUR_RH_DATA_FOUNDATION_ENDPOINT 1
                insecure: false
                access_key: YOUR_RH_DATA_FOUNDATION_ACCESS_KEY
                secret_key: YOUR_RH_DATA_FOUNDATION_SECRET_KEY

    # Possibly use ODF + Multicloud Object Gateway instead
    # # This namespace is later managed by Amazon Controller for Kubernetes - Amazon S3 Operator, but is required for the initial bootstrapping to complete
    # - name: configure ack-system project
    #   kubernetes.core.k8s:
    #     resource_definition:
    #       kind: Project
    #       apiVersion: project.openshift.io/v1
    #       metadata:
    #         name: ack-system
    #         labels:
    #           kubernetes.io/metadata.name: ack-system
    #   failed_when: false

    # - name: configure ack-s3-user-secrets
    #   kubernetes.core.k8s:
    #     resource_definition:
    #       kind: Secret
    #       apiVersion: v1
    #       metadata:
    #         name: ack-s3-user-secrets
    #         namespace: ack-system
    #       data:
    #         AWS_ACCESS_KEY_ID: "{{ access_key_id | b64encode}}"
    #         AWS_SECRET_ACCESS_KEY: "{{ secret_access_key | b64encode }}"
    #       type: Opaque

    # - name: configure ack-s3-user-config
    #   kubernetes.core.k8s:
    #     resource_definition:
    #       kind: ConfigMap
    #       apiVersion: v1
    #       metadata:
    #         name: ack-s3-user-config
    #         namespace: ack-system
    #       immutable: false
    #       data:
    #         ACK_ENABLE_DEVELOPMENT_LOGGING: 'false'
    #         ACK_LOG_LEVEL: info
    #         ACK_RESOURCE_TAGS: rosa-as-a-service
    #         ACK_WATCH_NAMESPACE: ''
    #         AWS_REGION: ap-southeast-2
    #         ENABLE_LEADER_ELECTION: 'true'
    #         LEADER_ELECTION_NAMESPACE: ''

